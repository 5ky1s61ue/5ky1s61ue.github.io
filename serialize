序列化 -> 让 对象 脱离运行环境的一种手段，实现数据通信和对象持久化
反序列化 -> 字节序列 恢复为 对象

Java反序列化
	1.只有实现了Serializable接口 的类的对象 才可以被序列化；
	2.所有属性必须是可序列化的(transient修饰属性除外，不参与序列化过程)

	而实现Serializable接口可以重写`readObject()`方法，其作用是从一个源输入流读取字节序列并执行反序列化动作，最后返回反序列化对象。
	由此，可以`定制`反序列化的一些行为 -> 攻击者可以通过构造恶意输入(反序列化的字节流数据)，让反序列化产生非预期的对象，从而执行任意代码。

	一些CVE漏洞也就是利用不同类对readObject实现时引入的缺陷


                     jndi
	hacker -> server ----> rmi -> local http service
		  execute payload  <-----------
		   			        bad class


序列化数据结构
	JAVA序列化数据可通过magic number识别，数据包开头为 `0x AC ED`，接下来两个字节表明版本号，后续字节包含类名、成员变量的类型和个数等信息。

STREAM_MAGIC (2 bytes) 0xACED 
STREAM_VERSION (2 bytes) 0x0005
    TC_OBJECT (1 byte) 0x73
        TC_CLASSDESC (1 byte) 0x72

反序列化过程
	ObejectInuputStream的readObject方法，用来将字节流数据反序列化为对象。
	如果流中的对象是 class，则它的ObjectStreamClass描述符会被读取，并返回相应的class对象，ObjectStreamClass包含类的名称及serialVersionUID。
	如果 类描述符 是动态代理类，调用resolveProxyClass方法来获取本地类。
	如果 类描述符 不是动态代理类，则调用resoveClass方法来获取本地类。
	如果无法解析该类，则抛出ClassNotFoundException异常。
	如果反序列化对象不是String,Arrary,Enum类型，ObjectStreamClass包含的类会在本地被检索。
	如果这个本地类没有实现java.io.Serializable或externalizable接口，则抛出InvalidClassException异常，因为只有实现这些接口的类对象才能被序列化。


分类：
1.开发失误
2.基础库隐藏的反序列化漏洞
3.POP(Property-Oriented Programing) Gadgets

一些常见Java反序列化漏洞的成因

利用Java反射机制：
java Apache-CommonsCollections3.1反序列化RCE漏洞

利用RMI机制：
CVE-2018-1297

JMX框架利用：
CVE-2017-12149

fastjson反序列化漏洞



相关工具
ysoserial
vulhub.org

主要参考：
1.https://paper.seebug.org/312/
2.https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/
3.https://xz.aliyun.com/t/6787
4.https://xz.aliyun.com/t/2041
