# API安全

## WHY
为什么需要关注API安全？
那可能需要首先明确：
1.什么是API
顾名思义，为应用提供的程序接口。技术角度上讲，也可以是认为是为应用创建用户接口的标准。
总的来说，API为`集成`而生，由一组用于`集成应用软件和服务`的工具和协议组合而成，具备高度的可拓展性和可用性，能够把IT世界的各种数据、应用和设备联动起来，并让它们更好地相互通信与协同工作。

2.有哪些API？
在使用场景上，API难以归类，兼具了访问控制，数据转换和传输的作用，在幕后协调各种不同的功能来为用户提供统一的应用程序服务。

从格式与技术架构角度区分API类别：
	1.REST API
		REpresentational State Transfer.
		使用HTTP来实现程序间的交互，因此是无状态的，响应可缓存。
		REST更适合与资源相关的操作，CRUD
		RPC更适合与行为相关的操作，命令(注册、登录等)
		补齐了RPC(SOAP、XML-RPC)的短板(开发部署成本高)。
		轻量、易于创建和部署。IoT。 OpenAPI 2.0(Swagger)定义了相关格式与标准。
	2.Real-time API
	对于金融、即时通讯、IoT等时效敏感的场景，需要实时的API交互模型。RPC，gRPC
	3.Others
	一些本地嵌入的API如SDK等。


3.API易受攻击的原因：
	1.权限过大；
	因为不是直接对`人`呈现，所以在应用程序的环境里常容易赋予API访问任意数据的权限。对于`终端用户`的`权限校验`，往往是在`终端用户`原始的一次/几次请求完成,然后，这些权限就会传递给API（通过Token等），而后续的API调用，并不受相关限制，攻击者只需要绕过身份验证/盗用身份，就能掌握这个API所拥有的权限了。
	2.可见性低；因为API调用都是在幕后完成的(相对于直观的用户界面而言)，一般都是危害发生的时候，才会让人注意到。而且一般API调用关系繁杂，对于异常的API调用，即时是开发团队也难以即时发现，而对于安全团队而言，由于不熟悉API调用的架构详情与业务细节，无法知晓异常API调用产生的影响，也是API可见性低的体现。
	3.API的错误配置；一些配置错误的API和一些并不被开发团队知晓但切实存在的API，导致更容易通过这些API绕过权限校验。

4.什么是API安全？
	API安全就是要确保API的`机密性`和`完整性`

5.为什么需要关注API安全？
	避免敏感数据泄露，API的广泛使用已经是一种趋势，特别是`微服务架构`和`server-less架构`的广泛采用与推广，这个趋势就更加明显，所以与日俱增的API数量与流量，引来了同步增加的API安全威胁。



## WHAT
为了实现`API安全`的目标，我们需要具备什么条件，满足什么场景？进一步，我们需要提供一种什么样的产品、服务或能力来实现这个目标

1.和API安全相关的产品
	API GATEWAY
	权限控制，API合法性校验，认证，授权，集成OAuth,JWT,OenID Connect,SAML服务

2.API攻击受攻击面：
	1.集成了大量第三方API的平台：

	2.移动应用程序：
		通过反编译 或 逆向移动APP，寻找漏洞或机会，例如硬编码和弱访问控制

3.API攻击的形式：
	1.针对API身份/权限认证的 访问攻击和注入攻击。
	2.越权以 获取敏感信息，身份盗用等。

4.API攻击的手段：
	1.API参数篡改：
		通过篡改API的入参，来进行攻击尝试，包括逆向这个API，引发DOS攻击，或者脱裤等。
	2.BOT攻击和DDOS攻击
		通过自动化工具，实施对API的爬取或者DDOS攻击，会对业务的计算等资源造成损耗。
	3.会话盗用/篡改：
		一般通过盗用/篡改cookie来实现会话的盗用/篡改。
	4.中间人攻击：
		如果API通过明文传输（比如HTTP），那么可能会泄露不少敏感信息，也容易遭受中间人攻击。
	5.注入攻击：
		通用的WEB攻击手法，如SQLI，CMDI等



5.API防护与WEB应用防护的异同
	主要对WAF(web application firewall)而言，如何觉察和定位到这些细微差异。
	WAF->WAFPP


## HOW
我们怎么实现/达成这么一种产品、服务或能力

1.梳理清楚业务具有的API
	（1.通过外部扫描，从黑客视角出发 2.开发、运维团队主动梳理，特别是风险API）
2.API认证
	1.用好认证框架 OAuth2.0->REST
	2.使用令牌（token）
	2.安全存储`认证凭据`
3.API授权
	1.遵循`最小权限`原则，根据API角色做好访问控制。(例如REST中限制HTTP方法，比如DELETE)
	2.过滤与验证输入后，再把输入传递给应用程序。(比如防御注入攻击)
4.API监控
	1.通过API监控，分析统计API调用的结果与行为序列，来抵御暴力破解和慢速攻击，最好同时监控API所服务的相关资源来确保完整性和机密性。
5.API加密和签名
	1.使用TLS实现加密
	2，使用签名
	预防中间人攻击。
6.使用API安全服务或工具识别漏洞与API薄弱之处
	1.API GATEWAY
7.使用配额和限流
	1.频率限制防止DOS
	2.追踪使用记录
8.测试业务API
	1.Scanner
9.API管理
	1.API密钥
	2.基础身份验证(id/username and key/password)
	3.OpenID Connect(OIDC)
	
作为WAF或者WAAP需要具备何种能力？
	1.API参数的分析能力；能根据历史流量，分析出不同API的参数结构（参数类型，key值限制，content-type，顺序，数量等等），对于异常的API参数，能及时发现、告警与拦截
	2.具备API限速能力和IP拉黑能力
	3.具备会话(Cookie)防篡改的能力：通过对Cookie进行签名(可以加入sip，host等作为部分hash因子)等手段进行校验审查，以达到防篡改的效果
	4.强制API加密传输
	5.注入攻击防护
	6.API用户追踪：对于特定API用户行为进行建模分析，发现异常行为。这里涉及到如何标识API用户(客户端)，在IoT API调用的场景一般有双向认证，那么可以根据客户端证书来标识。




##主要参考
1.https://www.f5.com/labs/articles/threat-intelligence/application-protection-report-2019-episode-5-api-breaches-and-the-visibility-problem
2.https://www.redhat.com/zh/topics/security/api-security
3.https://www.imperva.com/blog/six-ways-to-secure-apis/
